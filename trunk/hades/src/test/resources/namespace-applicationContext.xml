<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:hades="http://schemas.synyx.org/hades"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
	http://schemas.synyx.org/hades http://schemas.synyx.org/hades/hades.xsd">

	<import resource="infrastructure.xml" />

	<!-- 
		
		Simplified DAO configuration:
		
		1. Looks for DAO interfaces in ${dao-config.dao-package-name} named ${dao.name}Dao
		2. Uses entity classes from ${dao-config.entity-package-name}
		3. Registers daos under ${dao.name}Dao in the applicationContext
		4. Add postfix attributes to dao-config element as needed
		
		You can register DAOs as needed by simply adding "dao" elements named after domain classes
		and provide an DAO interface named as described above. 
		
		! Note, that PersistenceAnnotationBeanPostProcessor and PersistenceExceptionTranslationPostProcessor !
		! do not have to be explicitly registered as they are included by namespace parser                   !
		
	-->
	<hades:dao-config
		base-package="org.synyx.hades.dao" >

		<hades:dao id="userDao" />
		<hades:dao id="roleDao" />
		<hades:dao id="auditableUserDao" finder-lookup-strategy="create" />
	</hades:dao-config>
	
	<!-- Register custom DAO implementation explicitly -->
	<bean id="userDaoImpl" class="org.synyx.hades.dao.UserDaoImpl" />

	<hades:dao-config
		base-package="org.synyx.hades.dao">
		<hades:dao id="userExtendedDao" />
	</hades:dao-config>

</beans>
